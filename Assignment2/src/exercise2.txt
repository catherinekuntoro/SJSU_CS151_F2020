The big difference between primitive data types such as an “int” and a Wrapper class such as Integer is that primitive types hold the actual value of the instance variable, while Wrapper classes create an object of that class (in this case, it will create an Integer object).

Wrapper classes like Integer is an immutable class, which cannot change its value after the object is instantiated because they use the final keyword. One advantage of using the Integer class is that since the Integer is a class, once an Integer object has been instantiated, that Integer object can call some useful methods that the Integer class has. Such methods include compareTo() and equals(). The Integer object can also convert a String object to an int with the parseInt() method, and vise versa with the toString() method. 
Another advantage of using Wrapper classes like Integer is that some classes, like the Map or Collections class, need an object as their input, and they could not accept primitive types. Therefore, using the Integer class would be a valid input in order to instantiate such classes like Map or Collections, since the Integer class will make an Integer object once it is instantiated. Lastly, if needed, one could assign a null value to the Integer object. However, since the Integer class will make Integer objects, making objects take more memory usage than creating primitive type datas.

However, primitive types are preferable, especially in calculations that repeats, such as calculations that happen within a for loop, for example:
	for(int i = 0; i < 1000000 ; i++)
		Integer x = i+100;
		Integer y = x/4;
Using the Integer class and not the primitive type int inside the for loop, the program will create a lot of object instances of Integer “x” and “y”, since the Integer class is immutable and its value cannot change. As a consequence, creating a million object instances of the Integer class will slow down the performance of the program, especially if there are method calls made by the Integer class as well. Therefore, it is recommended that one uses primitive types for most cases, since the primitive data type will directly hold the value, and it would not slow down the program by creating object instances. Lastly, for the most part, using primitive types provides more readability. Although primitive type datas does not have methods like the Integer class, primitive type datas use less memory space.
